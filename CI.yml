variables:
  build.clean: all
  platform: x64
  containerName: "$(Agent.Name)-ci"

resources:
- repo: self

pool:
  name: Default

trigger:
- master

steps:
- task: PowerShell@2
  displayName: 'Reading Settings'
  inputs:
    errorActionPreference: silentlyContinue
    targetType: inline
    script: '$settings = (Get-Content (Join-Path $(Build.Repository.LocalPath) "settings.json") | ConvertFrom-Json); $appFolders = [string]::Join(',',$settings.appFolders); Write-Host "Set appFolders = $appfolders"; Write-Host "##vso[task.setvariable variable=appFolders]'$appFolders'"; $testFolders = [string]::Join(',',$settings.testFolders); Write-Host "Set testFolders = $testfolders"; Write-Host "##vso[task.setvariable variable=testFolders]'$testFolders'"; $version = "$(version)"; if ("$version" -eq "")  { $version = $settings.versions[0].version; Write-Host "Version not defined, using $version" }; $imageversion = $settings.versions | Where-Object { $_.version -eq $version }; if ($imageversion) { Write-Host "Set imageName = $($imageVersion.containerImage)"; Write-Host "##vso[task.setvariable variable=imageName]$($imageVersion.containerImage)"; Write-Host "Set alwaysPull = $($imageVersion.alwaysPull)"; Write-Host "##vso[task.setvariable variable=alwaysPull]$($imageVersion.alwaysPull)" } else { throw "Unknown version: $version"} '

- task: PowerShell@2
  displayName: 'Login to bcinsider repository'
  condition: and(succeeded(),or(eq(variables['version'],'nextminor'),eq(variables['version'],'nextmajor')))
  inputs:
    targetType: inline
    script: 'docker login "bcinsider.azurecr.io" -u "$(bcInsiderUsername)" -p "$(bcinsiderPassword)"'

- task: PowerShell@2
  displayName: 'Install NavContainerHelper'
  inputs:
    targetType: filePath
    filePath: 'scripts\Install-NavContainerHelper.ps1'

- task: PowerShell@2
  displayName: 'Create Build Container'
  inputs:
    targetType: filePath
    filePath: 'scripts\Create-Container.ps1'
    arguments: '-containername "$(containerName)" -imageName "$(imageName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -licenseFile $(if ("$(licenseFile)") { ConvertTo-SecureString -String "$(licenseFile)" -AsPlainText -Force } else { $null }) -alwayspull:("$(alwayspull)" -eq "True")'

- task: PowerShell@2
  displayName: 'Compile App'
  inputs:
    targetType: filePath
    filePath: 'scripts\Compile-App.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -buildProjectFolder "$(Build.Repository.LocalPath)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -appFolders ("$(appFolders)".Split(','))'
    failOnStderr: true

- task: PowerShell@2
  displayName: 'Compile Test App'
  inputs:
    targetType: filePath
    filePath: 'scripts\Compile-App.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -buildProjectFolder "$(Build.Repository.LocalPath)" -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -appFolders ("$(testFolders)".Split(','))'
    failOnStderr: true

- task: PowerShell@2
  displayName: 'Sign App'
  condition: and(succeeded(),ne(variables['CodeSignPfxFile'],''),ne(variables['CodeSignPfxPassword'],''))
  inputs:
    targetType: filePath
    filePath: 'scripts\Sign-App.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -PfxFile (ConvertTo-SecureString -String "$(CodeSignPfxFile)" -AsPlainText -Force) -PfxPassword (ConvertTo-SecureString -String "$(CodeSignPfxPassword)" -AsPlainText -Force) -appFolders ("$(appFolders)".Split(','))'

- task: PowerShell@2
  displayName: 'Publish App'
  inputs:
    targetType: filePath
    filePath: 'scripts\Publish-App.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -skipVerification:("$(CodeSignPfxFile)$(CodeSignPfxPassword)" -eq "") -appFolders ("$(appFolders)".Split(','))'

- task: PowerShell@2
  displayName: 'Publish Test App'
  inputs:
    targetType: filePath
    filePath: 'scripts\Publish-App.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -buildArtifactFolder "$(Build.ArtifactStagingDirectory)" -skipVerification -appFolders ("$(testFolders)".Split(','))'

- task: PowerShell@2
  displayName: 'Run Tests'
  inputs:
    targetType: filePath
    filePath: 'scripts\Run-Tests.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force))) -TestResultsFile (Join-Path "$(System.DefaultWorkingDirectory)" "TestResults.xml") -testsuite "DEFAULT"'
  
- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: XUnit
    testResultsFiles: TestResults.xml
    failTaskOnFailedTests: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: app'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)\app'
    ArtifactName: app

- task: PowerShell@2
  displayName: 'Remove Build Container'
  condition: always()
  inputs:
    targetType: filePath
    filePath: 'scripts\Remove-Container.ps1'
    arguments: '-containername "$(containerName)" -credential ([PSCredential]::new("$(Username)", (ConvertTo-SecureString -String "$(Password)" -AsPlainText -Force)))'
